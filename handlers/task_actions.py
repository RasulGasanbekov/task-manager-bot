from handlers.base_imports import *

router = Router()
@router.message(F.text.startswith("/delete"))
async def delete_task(message: Message):
    text = message.text.strip()  
    parts = text.split()  

    if len(parts) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏. –ü—Ä–∏–º–µ—Ä: <code>/delete 1</code>", parse_mode="HTML")
        return
    
    try:
        task_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return
    
    task = crud.get_task_by_id(user_id=message.from_user.id, task_id=task_id)
    
    if not task:
        await message.answer(f"‚ùå –ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    crud.delete_task(task_id=task_id)
    
    await message.answer(f"üóëÔ∏è –ó–∞–¥–∞—á–∞ \"{task.title}\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")

@router.message(F.text.startswith("/done"))
async def mark_task_done(message: Message):
    text = message.text.strip()  
    parts = text.split()  

    if len(parts) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏. –ü—Ä–∏–º–µ—Ä: <code>/done 1</code>", parse_mode="HTML")
        return
    
    try:
        task_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return
    
    task = crud.get_task_by_id(user_id=message.from_user.id, task_id=task_id)
    
    if not task:
        await message.answer(f"‚ùå –ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    crud.update_task_status(task_id=task_id, new_status="completed")
    
    await message.answer(f"üéâ –ó–∞–¥–∞—á–∞ \"{task.title}\" —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")