from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from utils import keyboards
from database import crud
from datetime import datetime
from aiogram.types import ReplyKeyboardRemove


router = Router()

class AddTask(StatesGroup):
    title = State()
    deadline = State()
    category = State()
    priority = State()

@router.message(F.text == "/start")
async def start_command(message: Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏ üéØ")

@router.message(F.text == "/help")
async def help_command(message: Message):
    await message.answer(
    "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
    "- /start ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å.\n"
    "- /add ‚Äî —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É. –ë–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.\n"
    "- /list ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ —Å –∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.\n"
    "- /delete ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ –Ω–æ–º–µ—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞.\n"
    "- /help ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ."
)

@router.message(F.text == "/list")
async def list_tasks(message: Message):
    tasks = crud.get_tasks_by_user(user_id=message.from_user.id)
    
    if not tasks:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.", parse_mode="HTML")
        return

    response = "üìå –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
    for idx, task in enumerate(tasks, 1):
        deadline_str = task.deadline.strftime("%d.%m %H:%M")
        response += (
            f"{idx}. <b>{task.title}</b>\n"
            f" <b>–î–µ–¥–ª–∞–π–Ω:</b> {deadline_str}\n"
            f" <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {task.category}\n"
            f" <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {task.priority}\n"
            "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì\n"
        )
        
    await message.answer(response, parse_mode="HTML")

@router.message(F.text == "/add")
async def add_task_start(message: Message, state: FSMContext):
    await state.set_state(AddTask.title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")

@router.message(AddTask.title)
async def add_task_deadline(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(AddTask.deadline)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (—Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):")

@router.message(AddTask.deadline)
async def add_task_category(message: Message, state: FSMContext):
    try:
        deadline = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        await state.update_data(deadline=deadline)
        await state.set_state(AddTask.category)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboards.category_keyboard())
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")

@router.message(AddTask.category)
async def add_task_priority(message: Message, state: FSMContext):
    await state.update_data(category=message.text)
    await state.set_state(AddTask.priority)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:",
        reply_markup=keyboards.priority_keyboard()
    )

@router.message(AddTask.priority)
async def save_task(message: Message, state: FSMContext):
    user_data = await state.get_data()
    crud.create_task(
        user_id=message.from_user.id,
        title=user_data['title'],
        deadline=user_data['deadline'],
        category=user_data['category'],
        priority=message.text
    )
    await state.clear()
    await message.answer(
        "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! ‚úÖ",
        reply_markup=ReplyKeyboardRemove()
        )
