from handlers.base_imports import *
from datetime import datetime, timedelta

def get_week_day(task):
    weekday_number = task.deadline.weekday()
    week_days = {
        0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        1: "–í—Ç–æ—Ä–Ω–∏–∫",
        2: "–°—Ä–µ–¥–∞",
        3: "–ß–µ—Ç–≤–µ—Ä–≥",
        4: "–ü—è—Ç–Ω–∏—Ü–∞",
        5: "–°—É–±–±–æ—Ç–∞",
        6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    return week_days[weekday_number]

router = Router()
@router.message(F.text == "/start")
async def start_command(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏. üéØ\n\n"
        "–ù–∞–∂–º–∏ /help, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
        parse_mode="HTML"
    )

@router.message(F.text == "/help")
async def help_command(message: Message):
    await message.answer(
        "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "- /start ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å.\n"
        "- /add ‚Äî —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É. –ë–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.\n"
        "- /list ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ —Å –∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.\n"
        "- /delete ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ –Ω–æ–º–µ—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞.\n"
        "- /help ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ."
    )

@router.message(F.text == "/list")
async def list_tasks(message: Message):
    tasks = crud.get_tasks_by_user(user_id=message.from_user.id)
    
    if not tasks:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.", parse_mode="HTML")
        return

    response = "üìå –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
    for idx, task in enumerate(tasks, 1):
        deadline_str = task.deadline.strftime("%d.%m.%Y %H:%M")
        weekday = get_week_day(task)
        status_text = 'üü† –í –ø—Ä–æ—Ü–µ—Å—Å–µ' if task.status == 'pending' else 'üü¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∞'
        response += (
            f"{idx}. <b>{task.title}</b>\n"
            f" <b>ID:</b> {task.id}\n"
            f" <b>–î–µ–¥–ª–∞–π–Ω:</b> {deadline_str}  ({weekday})\n"
            f" <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {task.category}\n"
            f" <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {task.priority}\n"
            f" <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
            "\n"
        )
        
    await message.answer(response, parse_mode="HTML")

@router.message(F.text == "/week_tasks")
async def show_calendar_week(message: Message):
    user_id = message.from_user.id

    today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    start_of_week = today - timedelta(days=today.weekday())  
    end_of_week = start_of_week + timedelta(days=6, hours=23, minutes=59, seconds=59)  

    tasks = crud.get_tasks_by_deadline_range(user_id=user_id, start=start_of_week, end=end_of_week)

    if not tasks:
        await message.answer("üéâ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é.")
        return

    response = "üìÖ –í–æ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:\n\n"
    for idx, task in enumerate(tasks, 1):
        deadline_str = task.deadline.strftime("%d.%m %H:%M")
        status_text = 'üü† –í –ø—Ä–æ—Ü–µ—Å—Å–µ' if task.status == 'pending' else 'üü¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∞'
        response += (
            f"{idx}. <b>{task.title}</b>\n"
            f" <b>–î–µ–¥–ª–∞–π–Ω:</b> {deadline_str}\n"
            f" <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {task.category}\n"
            f" <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {task.priority}\n"
            f" <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
            "\n"
        )

    await message.answer(response, parse_mode="HTML")
