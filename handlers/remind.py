from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from database import crud
from utils.keyboards import get_reminder_keyboard

router = Router()

@router.message(F.text.startswith("/remind"))
async def remind_setup(message: Message):
    text = message.text.strip()
    parts = text.split()

    if len(parts) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏. –ü—Ä–∏–º–µ—Ä: <code>/remind 1</code>", parse_mode="HTML")
        return

    try:
        task_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    task = crud.get_task_by_id(user_id=message.from_user.id, task_id=task_id)
    if not task:
        await message.answer(f"‚ùå –ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    await message.answer(
        "üîî –í—ã–±–µ—Ä–∏—Ç–µ, –∑–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:",
        reply_markup=get_reminder_keyboard(task_id)
    )

@router.callback_query(F.data.startswith("remind_"))
async def handle_reminder_choice(callback: CallbackQuery):
    data = callback.data.split("_")  
    if len(data) < 3:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    task_id = int(data[1])
    days = int(data[2])

    crud.update_task_reminder(task_id=task_id, reminder_days=days)

    await callback.message.edit_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ {days} {'–¥–µ–Ω—å' if days == 1 else '–¥–Ω—è'} –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞.")
    await callback.answer("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!")